{
    "blogs":
    [
        {
            "id": "blog1",
            "title": "Week 1",
            "theme": "We are not in Kansas anymore.",
            "content": "There is so much to learn. We started out soft and slow on days one and two. There were introductory talks by the founder and the teachers. They seem supportive and enthusiastic. I am looking forward to this!"
            },
            {
            "id": "blog2",
            "title": "Week 2",
            "theme": "Tip-toeing through the woods...",
            "content": "This week we were introduced to using the terminal in tandem with GitHub. I felt like Dorothy creeping carefully through the forest of the fighting trees in the borderlands of Oz. GitHub is an unsightly, un-user-friendly zone with an obstacle course of switches and pulleys. For comfort I lean in and hug my little dog Toto. I mean, my furry cat Frootie."
            },
            {
            "id": "blog3",
            "title": "Week 3",
            "theme": "Enter the flying monkey",
            "content": "JavaScript hovers over me like a flying monkey! I don't really want it to fly away; I just want it to become my pet. Everything is 'for loops' and creating variables. I am getting used to the idea of an element changing value as it progresses through the code. JS is dynamic, afterall. To experienced programmers it must sound like I'm stating the obvious, but it's new for me to see an element that I defined at the beginning transform into something else at the end. I am not used to thinking about code that way. HTML is sort of like Dorothy's sleepy hometown in Kansas where nothing changes, and Javascript is Oz--the crazy land where stuff happens."
            },
            {
            "id": "blog4",
            "title": "Week 4",
            "theme": "Teamwork is fun!",
            "content": "Our teams have been meeting for a few weeks now. I have a great team. Not only do we get stuff done but everyone is goofy and we have fun. I will spare you, gentle reader, a Wizard of Oz reference this time! But just this once. In our group work everyone has something to contribute with our beginners' patchwork knowledge and we aren't afraid to ask each other for clarification when we need it. Regarding code, I have become aware that not everything is solved with a 'for loop'. Too bad, since that is a snippet of code I have memorized. Functions and methods such as 'forEach' do seem more economical."
            },
            {
            "id": "blog5",
            "title": "Week 5",
            "theme": "Teamwork is challenging!",
            "content": "Everything was peaceful until my team came to a bump in the road (Wizard of Oz reference spared, but just this once). At the behest of my team I was to determine the style of our website, which was for a hypothetical metal band called 'The Frog Sayeth Croak'. Styling is not a priority (MVP--Minimum Viable Product), as the goal is to practice GitHub workflow and JS looping and functions. We get bonus points if our site looks like an old-school MySpace page. FUN! I envisioned some tackiness along with the imprint of a newbie coder--maybe a fan of the band. After all, we are new at this. Why not use that to our advantage! 'Murky, green, dark, (swampy--this band has 'frog' in their name), kitschy, and sorta bad taste' were included in the style guide I'd started on. Neon green would outline images upon hover (slightly obnoxious) and a putrid rust would glow behind headers that had a Halloweeny Google font called 'Eater'! How about we leave the bullets on lists. And yeah, let's have lists! SLICK! This glory would sit on a background of grey-to-green gradient. Bloated with satisfaction, I shared it with the group. The first reaction from a teammate was 'METAL', but the second was not so accepting. Deflated, I realized we needed a more thorough discussion about how to express the band's character. It was brought up that 'regardless of whether tacky is deliberately tacky or unintentionlly so, it is still just tacky'. I admit I was disappointed my aesthetic was not appreciated, but knew we all needed to agree. The garish purity I'd hoped for is mostly gone, but some elements remain. More importantly, everyone is happy."
            },
            {
            "id": "blog6",
            "title": "Week 6",
            "theme": "ES6 is better.",
            "content": "We were introduced to the syntax of ES6, which makes certain things less tedious, such as concatenating tags of html strings with objects in JS. And there are the differences between statements 'var', 'let', and 'const'. They vary in that 'var' allows you to define, update, and redefine a value and can be block or globally-scoped; 'let' allows you to define and update, and 'const' allows you to define (only). These latter two are block-scoped and were developed because the global-scope capability of 'var' is a little dangerous. If it is defined outside a function 'naming collisions' can occur. I comprehend these differences in theory, but know that to really understand I'll have to become more familiar with using them and probably encounter some breakages. I was glad to learn about template literals. They seem more efficient and easier on the eye, as does the fat arrow function. I'll sign off with once concern, however. Isn't it not very nice to call the arrow 'fat'?"
            },
            {
            "id": "blog7",
            "title": "Week 7",
            "theme": "THE XHR REQUEST",
            "content": "The XHR request deserves its title in all caps because it is kind of scary. There is something intimidating about acronyms that begin with the letter X. They sound so 'mega'. How tempting it is to compare the XHR to the 'Wizard of Oz' himself. Let's take a closer look to see what it is really made of. XHR stands for XMLHttpRequest. Still a little scary. So what is an XHR? It is the web standard for server communication. It requests data from a server. The way it operates brings to our attention synchronicity vs asynchronicity. We have so far been used to synchronous code, which is like a line of people who buy their movie tickets in the order that they are lined up in. Asynchronous code can be compared to diners at a restaurant who order at different times and receive their orders when the food is ready; not necessarily according to the sequence they ordered in. XHR requests are asynchronous. The server is the decider of when it responds to requests, and code moves on while it is waiting to hear from the server. XHRs consist of a set of tasks such as making the request, what code to execute when the file loads and when it fails, where to get the data (a JSON file for JS code), and how to use the data in printing it to the DOM. In fact, I am writing this blog within one of the JSON files that my one of my XHRs requests from. How meta! Adapting the XHRs to different exercises we've been doing has not been difficult--it only looked difficult at first because the functions were unfamiliar garble, which I've begun to understand. I am pleased to report that I just built two XHR requests in my portfolio website project and got them to work! Be gone, wizard! You are just a little man! (Smug side note: to add the word 'request' to XHR is redundant, as you may have observed; similar to saying 'Please RSVP'. Unsmug side request: Please allow me this cleverness. I need to feel smart because learning to code is a most humbling pursuit, often making the novice and even the seasoned feel dumb. OH, EXCEPT WHEN STUFF WORKS!)" 
            },
            {
            "id": "blog8",
            "title": "Week 8",
            "theme": "Theme",
            "content": "I will write something here."
            },
            {
            "id": "blog9",
            "title": "Week 9",
            "theme": "Theme",
            "content": "I will write something here."
            },
            {
            "id": "blog10",
            "title": "Week 10",
            "theme": "Theme",
            "content": "I will write something here."
            },
            {
            "id": "blog11",
            "title": "Week 11",
            "theme": "Theme",
            "content": "I will write something here."
            },
            {
            "id": "blog12",
            "title": "Week 12",
            "theme": "Theme",
            "content": "I will write something here."
            }
        ]
    }